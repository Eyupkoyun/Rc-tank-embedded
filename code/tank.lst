CCS PCM C Compiler, Version 5.119d, 1               21-Nis-25 11:53
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\eyupk\Desktop\RC tank project\code\tank.lst

               ROM used:   504 words (6%)
                           Largest free fragment is 2048
               RAM used:   9 (3%) at main() level
                           15 (4%) worst case
               Stack used: 2 locations
               Stack size: 7

*
0000:  NOP
0001:  MOVLW  01
0002:  MOVWF  0A
0003:  GOTO   1DC
.................... /* to do listim
.................... basic sol palet ve sag palet ileri geri=tamam
.................... kule sag sol=pwm mantigini ogrenirsem tamam, ayrica kule ve namlu pwm fonklari hangi a?ilarda ?alisacak ben d padde bas?l? tuttukca 1++ derece seklind egi,debilecek mi yoksa 15-30-45 gibi derecelerde mi ccalisacak?? 
.................... namlu yukari asagi
.................... laser ac kapa=henuz eklenmedi ama d7 ye takilacak simdilik led takabilirim
.................... isik ac kapa=simdilik led takicam aldigimda fener takarim,
.................... ses cal=dfplayer hen?z alinmadi alindiginda uyari sesleri ve istenirse muzik calinabilecek
.................... kaliteli ivme kontrol=mpcv6050 alincak henuz yapilmadi
.................... labirent{ //genel olarak ana hatlariyla boyle olucak sadece epproma nasil veri kaydedip otonom geri gelme yapilcak henuz bilmiyorum
....................    sag kontrol
....................    sol kontrol
....................    geri don
....................    eski konum=eski konuma mi gelmeli yoksa direkt yeni yola mi girmeli emin degilim
....................    islemleri kaydedip tersini yaptirma=
....................    mz80 verisini s?rekli ve dogru sekide mi okuyorum=
.................... }
.................... yapilan fonklar uygun mu=?
.................... fonklar parametreli olmali mi=?
.................... kullandigim mz80 hc06 l298n gibi bilesenler direkt kullanilir mi onlarin kendi kodlari olacak mi=?
.................... 
.................... */
.................... 
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
*
0038:  CLRF   77
0039:  CLRF   78
003A:  MOVF   26,W
003B:  BCF    03.0
003C:  BTFSC  27.0
003D:  ADDWF  77,F
003E:  RRF    77,F
003F:  RRF    78,F
0040:  BTFSC  27.1
0041:  ADDWF  77,F
0042:  RRF    77,F
0043:  RRF    78,F
0044:  BTFSC  27.2
0045:  ADDWF  77,F
0046:  RRF    77,F
0047:  RRF    78,F
0048:  BTFSC  27.3
0049:  ADDWF  77,F
004A:  RRF    77,F
004B:  RRF    78,F
004C:  BTFSC  27.4
004D:  ADDWF  77,F
004E:  RRF    77,F
004F:  RRF    78,F
0050:  BTFSC  27.5
0051:  ADDWF  77,F
0052:  RRF    77,F
0053:  RRF    78,F
0054:  BTFSC  27.6
0055:  ADDWF  77,F
0056:  RRF    77,F
0057:  RRF    78,F
0058:  BTFSC  27.7
0059:  ADDWF  77,F
005A:  RRF    77,F
005B:  RRF    78,F
*
0060:  MOVF   28,W
0061:  CLRF   78
0062:  SUBWF  27,W
0063:  BTFSC  03.0
0064:  GOTO   068
0065:  MOVF   27,W
0066:  MOVWF  77
0067:  GOTO   074
0068:  CLRF   77
0069:  MOVLW  08
006A:  MOVWF  29
006B:  RLF    27,F
006C:  RLF    77,F
006D:  MOVF   28,W
006E:  SUBWF  77,W
006F:  BTFSC  03.0
0070:  MOVWF  77
0071:  RLF    78,F
0072:  DECFSZ 29,F
0073:  GOTO   06B
.................... 
.................... #list
.................... 
.................... #include <tank.h>
.................... #ifndef TANK_H
.................... #define TANK_H
.................... 
.................... /////////// FONKSIYON PROTOTIPLERI ///////////
.................... 
.................... // Kurulum
.................... void setup();
.................... 
.................... // HC-06 veri alimi
.................... void hc06();
.................... 
.................... // Servo kontrolleri
.................... void servo_namlu_yukari();
.................... void servo_namlu_asagi();
.................... void servo_kule_sag();
.................... void servo_kule_sol();
.................... 
.................... // PWM hesaplama
.................... int aciToDuty(int aci);
.................... 
.................... // Palet kontrolleri
.................... void SOL_ILERI();
.................... void SOL_GERI();
.................... void SAG_ILERI();
.................... void SAG_GERI();
.................... void ILERI();
.................... void GERI();
.................... void DUR();
.................... void ENGELDE_DUR();
.................... 
.................... // Lazer, fener, müzik
.................... void LAZER_TOGGLE();
.................... void FENER_TOGGLE();
.................... void MUZIK_UYARI_SES();
.................... void KORNA_SES();
.................... 
.................... // Ates etme
.................... void ATES_ET();
.................... 
.................... // Engel kontrol
.................... int SUREKLI_ENGEL_KONTROL();
.................... 
.................... // Labirent algoritmalari
.................... void LABIRENT_KURTUL();
.................... void LAB_SAG_DON();
.................... void LAB_180at();
.................... void LAB_SOL_DON();
.................... 
.................... /////////// GLOBAL DEGISKENLER ///////////
.................... extern int angle; //degisken baska dosyalardan erisilebilir oluyo ama kullanacagin yerde gercekten tanimlaman lazim asagidaki ikili calismadi cunku
.................... extern int sag_dogru_karar;
.................... extern int sol_dogru_karar;
.................... 
.................... #endif
.................... 
.................... 
.................... #define _XTAL_FREQ 20000000
.................... #device ADC=10
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP,PUT
.................... #use delay(clock=20M)
*
0078:  MOVLW  26
0079:  MOVWF  04
007A:  BCF    03.7
007B:  MOVF   00,W
007C:  BTFSC  03.2
007D:  GOTO   08B
007E:  MOVLW  06
007F:  MOVWF  78
0080:  CLRF   77
0081:  DECFSZ 77,F
0082:  GOTO   081
0083:  DECFSZ 78,F
0084:  GOTO   080
0085:  MOVLW  7B
0086:  MOVWF  77
0087:  DECFSZ 77,F
0088:  GOTO   087
0089:  DECFSZ 00,F
008A:  GOTO   07E
008B:  RETURN
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8, parity=N, stop=1) //hc06 haberlesmesi icin gerekli zaten bunu eklemeyince getch() falan hata verdi
....................  
.................... #define SOLF PIN_B0
.................... #define SOLB PIN_B1
.................... #define SAGF PIN_B2
.................... #define SAGB PIN_B3
.................... 
.................... #define KORNA PIN_D4
.................... 
.................... #define MZ80 PIN_B4
.................... 
.................... #define SERVO_NAMLU PIN_C1
.................... #define SERVO_KULE PIN_C2
.................... 
.................... #define ATES PIN_D2
.................... #define LAZER PIN_D7
.................... #define SOL_SINYAL PIN_D6
.................... #define SAG_SINYAL PIN_D5
.................... #define LABIRENT PIN_D0 // ileride kullanicaz acelesi yok
.................... #define FENER PIN_D1
.................... 
.................... #define hc06NINTX PIN_C7  //giris
.................... #define hc06NINRX PIN_C6 //3.3v verdigimiz-cikis
.................... 
.................... 
.................... int angle = 0; //default boyle baslasin
.................... 
.................... 
.................... void setup() {
....................    //CCS S PREFIXTEN GELDI DOGRU MUDUR BUNLAR?
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1);      //13,1 ms overflow
*
0004:  MOVLW  85
0005:  MOVWF  10
....................    setup_timer_2(T2_DIV_BY_16,255,1);      //819 us overflow, 819 us interrupt
0006:  MOVLW  00
0007:  MOVWF  78
0008:  IORLW  06
0009:  MOVWF  12
000A:  MOVLW  FF
000B:  BSF    03.5
000C:  MOVWF  12
.................... 
....................    setup_ccp1(CCP_PWM);
000D:  BCF    03.5
000E:  BCF    23.2
000F:  MOVF   23,W
0010:  BSF    03.5
0011:  MOVWF  07
0012:  BCF    03.5
0013:  BCF    07.2
0014:  MOVLW  0C
0015:  MOVWF  17
....................    setup_ccp2(CCP_PWM);
0016:  BCF    23.1
0017:  MOVF   23,W
0018:  BSF    03.5
0019:  MOVWF  07
001A:  BCF    03.5
001B:  BCF    07.1
001C:  MOVLW  0C
001D:  MOVWF  1D
....................    set_pwm1_duty((int16)0);
001E:  CLRF   15
001F:  MOVF   17,W
0020:  ANDLW  CF
0021:  MOVWF  17
....................    set_pwm2_duty((int16)0);
0022:  CLRF   1B
0023:  MOVF   1D,W
0024:  ANDLW  CF
0025:  MOVWF  1D
....................       
....................    set_tris_b(0b00010000); //b4 mz80 yani input digerleri onemsiz
0026:  MOVLW  10
0027:  BSF    03.5
0028:  MOVWF  06
....................    set_tris_c(0b01000000);
0029:  MOVLW  40
002A:  MOVWF  07
002B:  BCF    03.5
002C:  MOVWF  23
....................    set_tris_d(0b00000000); //bunlar dogru mu?
002D:  MOVLW  00
002E:  BSF    03.5
002F:  MOVWF  08
0030:  BCF    03.5
0031:  BCF    0A.3
0032:  BCF    0A.4
0033:  GOTO   1F4 (RETURN)
....................    
.................... }
.................... void main()
*
01DC:  MOVF   03,W
01DD:  ANDLW  1F
01DE:  MOVWF  03
01DF:  MOVLW  81
01E0:  BSF    03.5
01E1:  MOVWF  19
01E2:  MOVLW  A6
01E3:  MOVWF  18
01E4:  MOVLW  90
01E5:  BCF    03.5
01E6:  MOVWF  18
01E7:  CLRF   20
01E8:  MOVLW  FF
01E9:  MOVWF  23
01EA:  BSF    03.5
01EB:  BSF    1F.0
01EC:  BSF    1F.1
01ED:  BSF    1F.2
01EE:  BCF    1F.3
01EF:  MOVLW  07
01F0:  MOVWF  1C
01F1:  BCF    03.7
.................... {
.................... 
....................    setup();
01F2:  BCF    03.5
01F3:  GOTO   004
....................   
.................... 
....................    
....................    
....................    
....................    while(TRUE)
....................    {
....................    hc06();
01F4:  GOTO   109
....................    SUREKLI_ENGEL_KONTROL();
01F5:  CALL   0C8
01F6:  GOTO   1F4
....................       
....................    }
.................... 
.................... }
.................... 
01F7:  GOTO   1F7
.................... 
.................... void hc06()
.................... {
....................     char veri;
....................     if (kbhit())  //veri geldi mi
*
0109:  BTFSS  0C.5
010A:  GOTO   1D9
....................     {
....................         veri = getc();  // Gelen veriyi oku
010B:  BTFSS  0C.5
010C:  GOTO   10B
010D:  MOVF   1A,W
010E:  MOVWF  24
.................... 
....................         switch(veri)
010F:  MOVF   24,W
0110:  XORLW  55
0111:  BTFSC  03.2
0112:  GOTO   132
0113:  XORLW  11
0114:  BTFSC  03.2
0115:  GOTO   142
0116:  XORLW  16
0117:  BTFSC  03.2
0118:  GOTO   151
0119:  XORLW  1E
011A:  BTFSC  03.2
011B:  GOTO   159
011C:  XORLW  7B
011D:  BTFSC  03.2
011E:  GOTO   161
011F:  XORLW  06
0120:  BTFSC  03.2
0121:  GOTO   163
0122:  XORLW  08
0123:  BTFSC  03.2
0124:  GOTO   16C
0125:  XORLW  0A
0126:  BTFSC  03.2
0127:  GOTO   16E
0128:  XORLW  75
0129:  BTFSC  03.2
012A:  GOTO   177
012B:  XORLW  07
012C:  BTFSC  03.2
012D:  GOTO   187
012E:  XORLW  08
012F:  BTFSC  03.2
0130:  GOTO   1C8
0131:  GOTO   1D8
....................         {
....................         
....................         //yanlis d pad kule ve namlu icin joystcikler palet hareketleri icin
....................             case 'U': servo_namlu_yukari(); break;
*
0141:  GOTO   1D9
....................             case 'D': servo_namlu_asagi(); break;
*
0150:  GOTO   1D9
....................             case 'R': servo_kule_sag(); break;
*
0158:  GOTO   1D9
....................             case 'L': servo_kule_sol(); break;
*
0160:  GOTO   1D9
....................             case '7': SOL_ILERI(); break;  // Sol joystick ileri 
0161:  CALL   08C
0162:  GOTO   1D9
....................             case '1': SOL_GERI(); break;   // Sol joystick geri 
*
016B:  GOTO   1D9
....................             case '9': SAG_ILERI(); break;  // Sag joystick ileri
016C:  CALL   095
016D:  GOTO   1D9
....................             case '3': SAG_GERI(); break;   // Sag joystick geri
*
0176:  GOTO   1D9
....................             //case 'I': KORNA(); break;
....................             case 'F': ATES_ET(); break;
*
0186:  GOTO   1D9
....................             case 'A': LABIRENT_KURTUL(); break;
*
01C7:  GOTO   1D9
....................             case 'I': KORNA_SES(); break; //degisirsin sonra
*
01D7:  GOTO   1D9
....................             //case 'P': LAZER_TOGGLE(); break;
....................             default: DUR(); break;  // Gecersiz veri gelirse tank dursun
01D8:  CALL   09E
....................         }
....................     }
01D9:  BCF    0A.3
01DA:  BCF    0A.4
01DB:  GOTO   1F5 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... /////////////////SERVOLAR-NAMLU-KULE//////////////////
.................... 
.................... void servo_namlu_yukari() {
....................    if (angle < 90) {
*
0132:  MOVF   20,W
0133:  SUBLW  59
0134:  BTFSS  03.0
0135:  GOTO   140
....................       angle += 1;
0136:  MOVLW  01
0137:  ADDWF  20,F
....................       set_pwm1_duty(aciToDuty(angle));
0138:  MOVF   20,W
0139:  MOVWF  25
013A:  CALL   034
013B:  MOVF   78,W
013C:  MOVWF  15
....................       delay_ms(20);  // yavaslat
013D:  MOVLW  14
013E:  MOVWF  26
013F:  CALL   078
0140:  NOP
....................    }
.................... }
.................... void servo_namlu_asagi() {
....................    if (angle > 0) {
*
0142:  MOVF   20,F
0143:  BTFSC  03.2
0144:  GOTO   14F
....................       angle -= 1;
0145:  MOVLW  01
0146:  SUBWF  20,F
....................       set_pwm1_duty(aciToDuty(angle));
0147:  MOVF   20,W
0148:  MOVWF  25
0149:  CALL   034
014A:  MOVF   78,W
014B:  MOVWF  15
....................       delay_ms(20);  // yavaslat
014C:  MOVLW  14
014D:  MOVWF  26
014E:  CALL   078
014F:  NOP
....................    }
.................... }
.................... void servo_kule_sag() {
....................    set_pwm2_duty(115);  // donus hizi
*
0151:  MOVLW  73
0152:  MOVWF  1B
....................    delay_ms(20);        //duruma gore delay azalt-artir duty oynama salla
0153:  MOVLW  14
0154:  MOVWF  26
0155:  CALL   078
....................    set_pwm2_duty(94);   // dur
0156:  MOVLW  5E
0157:  MOVWF  1B
.................... }
.................... void servo_kule_sol() {
....................    set_pwm2_duty(75);   
*
0159:  MOVLW  4B
015A:  MOVWF  1B
....................    delay_ms(20);
015B:  MOVLW  14
015C:  MOVWF  26
015D:  CALL   078
....................    set_pwm2_duty(94);   // dur
015E:  MOVLW  5E
015F:  MOVWF  1B
.................... }
.................... 
.................... int aciToDuty(int aci) {
....................    return 62 + ((aci * (125 - 62)) / 180);  // 62?125 duty arasi (1ms?2ms)
*
0034:  MOVF   25,W
0035:  MOVWF  26
0036:  MOVLW  3F
0037:  MOVWF  27
*
005C:  MOVF   78,W
005D:  MOVWF  27
005E:  MOVLW  B4
005F:  MOVWF  28
*
0074:  MOVF   78,W
0075:  ADDLW  3E
0076:  MOVWF  78
0077:  RETURN
.................... }
.................... 
.................... 
.................... 
.................... ///////////////////DEFAULTTAKI HAREKETLER
.................... 
.................... void SOL_ILERI() {
....................    output_high(SOLF);
*
008C:  BSF    03.5
008D:  BCF    06.0
008E:  BCF    03.5
008F:  BSF    06.0
....................    output_low(SOLB);
0090:  BSF    03.5
0091:  BCF    06.1
0092:  BCF    03.5
0093:  BCF    06.1
0094:  RETURN
.................... }
.................... void SOL_GERI() {
....................    output_low(SOLF);
*
0163:  BSF    03.5
0164:  BCF    06.0
0165:  BCF    03.5
0166:  BCF    06.0
....................    output_high(SOLB);
0167:  BSF    03.5
0168:  BCF    06.1
0169:  BCF    03.5
016A:  BSF    06.1
.................... }
.................... 
.................... void SAG_ILERI() {
....................    output_high(SAGF);
*
0095:  BSF    03.5
0096:  BCF    06.2
0097:  BCF    03.5
0098:  BSF    06.2
....................    output_low(SAGB);
0099:  BSF    03.5
009A:  BCF    06.3
009B:  BCF    03.5
009C:  BCF    06.3
009D:  RETURN
.................... }
.................... void SAG_GERI() {
....................    output_low(SAGF);
*
016E:  BSF    03.5
016F:  BCF    06.2
0170:  BCF    03.5
0171:  BCF    06.2
....................    output_high(SAGB);
0172:  BSF    03.5
0173:  BCF    06.3
0174:  BCF    03.5
0175:  BSF    06.3
.................... }
.................... 
.................... void ILERI() {
....................    SOL_ILERI();
*
0106:  CALL   08C
....................    SAG_ILERI();
0107:  CALL   095
0108:  RETURN
.................... }
.................... void GERI() {
....................    SOL_GERI();
....................    SAG_GERI();
.................... }
.................... void DUR() {
....................    output_low(SOLB);
*
009E:  BSF    03.5
009F:  BCF    06.1
00A0:  BCF    03.5
00A1:  BCF    06.1
....................    output_low(SAGB);
00A2:  BSF    03.5
00A3:  BCF    06.3
00A4:  BCF    03.5
00A5:  BCF    06.3
....................    output_low(SOLF);
00A6:  BSF    03.5
00A7:  BCF    06.0
00A8:  BCF    03.5
00A9:  BCF    06.0
....................    output_low(SAGF);
00AA:  BSF    03.5
00AB:  BCF    06.2
00AC:  BCF    03.5
00AD:  BCF    06.2
00AE:  RETURN
.................... }
.................... 
.................... void ENGELDE_DUR() {
....................    if(SUREKLI_ENGEL_KONTROL()==1){
....................    DUR();
....................    delay_ms(1000);
....................    GERI();
....................    delay_ms(1000);
....................    DUR();
....................    }
....................       // LABIRENT_KURTUL() calisiyorsa bu kapali olmali mantiken????
....................    
.................... }
.................... 
.................... void ATES_ET() {
....................    output_high(ATES);
*
0177:  BSF    03.5
0178:  BCF    08.2
0179:  BCF    03.5
017A:  BSF    08.2
....................    delay_ms(600);
017B:  MOVLW  03
017C:  MOVWF  25
017D:  MOVLW  C8
017E:  MOVWF  26
017F:  CALL   078
0180:  DECFSZ 25,F
0181:  GOTO   17D
....................    output_low(ATES);
0182:  BSF    03.5
0183:  BCF    08.2
0184:  BCF    03.5
0185:  BCF    08.2
....................    //f310ten kod ile case F gelicek F geldiginde high olsun sonr aotomatik kapansin toggle veya basili tutma olursa tanki yakma ihtimali var gibi
.................... }
.................... 
.................... void KORNA_SES() {
.................... 
....................    output_high(KORNA);
*
01C8:  BSF    03.5
01C9:  BCF    08.4
01CA:  BCF    03.5
01CB:  BSF    08.4
....................    delay_ms(1000);
01CC:  MOVLW  04
01CD:  MOVWF  25
01CE:  MOVLW  FA
01CF:  MOVWF  26
01D0:  CALL   078
01D1:  DECFSZ 25,F
01D2:  GOTO   1CE
....................    output_low(KORNA);
01D3:  BSF    03.5
01D4:  BCF    08.4
01D5:  BCF    03.5
01D6:  BCF    08.4
.................... }
.................... 
.................... 
.................... void LAZER_TOGGLE() {
....................    
....................    // lazer henuz alinmadi
.................... }
.................... void FENER_TOGGLE() {
.................... 
....................   //henuz almaadim
.................... }
.................... 
.................... void MUZIK_UYARI_SES() {
....................    
....................    // dfplayer henuz alinmadi
.................... }
.................... 
.................... /////////////
.................... //LABIRENT KODLARI
.................... ////////////
.................... int  SUREKLI_ENGEL_KONTROL() {
....................    if(input(MZ80)==true) return true;
*
00C8:  BSF    03.5
00C9:  BSF    06.4
00CA:  BCF    03.5
00CB:  BTFSS  06.4
00CC:  GOTO   0D1
00CD:  MOVLW  01
00CE:  MOVWF  78
00CF:  GOTO   0D3
00D0:  GOTO   0D3
....................    else return false;
00D1:  MOVLW  00
00D2:  MOVWF  78
00D3:  RETURN
.................... }
.................... 
.................... int sag_dogru_karar;
.................... int sol_dogru_karar;
.................... 
.................... void LABIRENT_KURTUL() {
....................     if(sol_dogru_karar>sag_dogru_karar) { // tam karsida duvar var onceden hep sol yapmissin o zaman simdi once sag kontrol et
*
0187:  MOVF   22,W
0188:  SUBWF  21,W
0189:  BTFSC  03.0
018A:  GOTO   1AD
....................       
....................         LAB_SOL_DON();
018B:  CALL   0AF
....................         DUR();
018C:  CALL   09E
....................         delay_ms(1000); 
018D:  MOVLW  04
018E:  MOVWF  25
018F:  MOVLW  FA
0190:  MOVWF  26
0191:  CALL   078
0192:  DECFSZ 25,F
0193:  GOTO   18F
....................          
....................         if(SUREKLI_ENGEL_KONTROL()==1) {// sola donunce engel cikti
0194:  CALL   0C8
0195:  DECFSZ 78,W
0196:  GOTO   1A0
....................             LAB_180at();
0197:  CALL   0D4
.................... 
....................             if (SUREKLI_ENGEL_KONTROL()==1) //sagda da engel varsa geri dön terste bekle
0198:  CALL   0C8
0199:  DECFSZ 78,W
019A:  GOTO   19D
....................             {
....................                LAB_SAG_DON(); //artik kafa geriye bakiyor. burdan sonrasi hazifaza tutup otonom geri gelme
019B:  CALL   0ED
....................             }
019C:  GOTO   19F
....................             else {
....................                //sagda engel yokmus demek. burasi tamam artik engel yok L labirentmis, çsagdan gidicez sagL labirentmis
....................                ILERI(); 
019D:  CALL   106
....................                sag_dogru_karar++;
019E:  INCF   21,F
....................             }
....................          }
019F:  GOTO   1AC
.................... 
....................         else { //solda engel yokmus buradan gidicez ama yine de sagda engel var mi ogrenip hafizada burayi"karar noktasi" olarak tutucaz
....................             sol_dogru_karar++;
01A0:  INCF   22,F
....................             LAB_180at();
01A1:  CALL   0D4
....................             if (SUREKLI_ENGEL_KONTROL()==0) //yani sirf burada bosluk var mi? geri dönmem gerekir mi diye kontrol ettigim bi yer burayi nasil tutucam bilmiyorum
01A2:  CALL   0C8
01A3:  MOVF   78,F
01A4:  BTFSS  03.2
01A5:  GOTO   1AA
....................             {
....................                
....................                //hafizaya ekle burasi bosluk, buradan cikis yapilacak ama once solu deniycez
....................                sag_dogru_karar++;
01A6:  INCF   21,F
....................                LAB_180at();
01A7:  CALL   0D4
....................                ILERI(); //sola donduk gidiyoz
01A8:  CALL   106
....................             }
01A9:  GOTO   1AC
....................             else {
....................                //engel varmis burayi yokmus gibi davranicaz 180 atip soldan devam edicez
....................                LAB_180at();
01AA:  CALL   0D4
....................                ILERI(); 
01AB:  CALL   106
....................             }
....................              
....................          }
....................    } 
01AC:  GOTO   1C6
.................... 
....................    else { //yani sag karar=>sol kararmis
....................       LAB_SAG_DON();
01AD:  CALL   0ED
....................       if(SUREKLI_ENGEL_KONTROL()==1) { //sagda engel varmis, solu kontrol et eger bossa git sol L labirent, solda engel varsa geri dön 
01AE:  CALL   0C8
01AF:  DECFSZ 78,W
01B0:  GOTO   1BB
.................... 
....................          LAB_180at();
01B1:  CALL   0D4
....................          if (SUREKLI_ENGEL_KONTROL()==0) //180 atip solda engel gormeyince o yoldan devam et
01B2:  CALL   0C8
01B3:  MOVF   78,F
01B4:  BTFSS  03.2
01B5:  GOTO   1B9
....................          {
....................             sol_dogru_karar++;
01B6:  INCF   22,F
....................             ILERI();
01B7:  CALL   106
....................          }
01B8:  GOTO   1BA
....................          else { //sol da dolu engel var, geri don çik gir buralardan
....................             LAB_SOL_DON();
01B9:  CALL   0AF
....................          }
....................          
.................... 
....................       }
01BA:  GOTO   1C6
.................... 
....................       else { //sagda engel yokmus saga gidicez ama sol kontrol et
....................          sag_dogru_karar++;
01BB:  INCF   21,F
....................          LAB_180at();
01BC:  CALL   0D4
.................... 
....................          if (SUREKLI_ENGEL_KONTROL()==1)
01BD:  CALL   0C8
01BE:  DECFSZ 78,W
01BF:  GOTO   1C3
....................          {
....................             //solda engel varmis sadece saga gidis varmis saga donuk L labirent
....................             LAB_180at(); //tekrar saga donduk gidicez
01C0:  CALL   0D4
....................             ILERI();
01C1:  CALL   106
....................          }
01C2:  GOTO   1C6
....................          else {
....................             sol_dogru_karar++;
01C3:  INCF   22,F
....................             //BURADAKI  YORUM SATIRLARI ONEMLI  MANTIK BUNUN UZERINE KURULU
....................             //solda da engel yokmus burayi karar noktasi belirliyoruz 
....................             //ona gore ileride takilirsak buraya donup burdan sola gitme karari verip labirentten cikma sansini deniycez
....................             LAB_180at(); //saga donduk gidicez bakalim ileride ne engeller cikicak dogru yol bu muymus acaba?
01C4:  CALL   0D4
....................             ILERI();
01C5:  CALL   106
01C6:  NOP
....................          }
....................          
....................       }
.................... 
.................... 
....................    }   
.................... }
....................    
.................... void LAB_SAG_DON() { //saga doncurcek bizi ama sureyi ayarla mesela 90 derece donmek icin kac sn calismali
....................    output_low(SAGF);
*
00ED:  BSF    03.5
00EE:  BCF    06.2
00EF:  BCF    03.5
00F0:  BCF    06.2
....................    output_high(SAGB);
00F1:  BSF    03.5
00F2:  BCF    06.3
00F3:  BCF    03.5
00F4:  BSF    06.3
....................    output_high(SOLF);
00F5:  BSF    03.5
00F6:  BCF    06.0
00F7:  BCF    03.5
00F8:  BSF    06.0
....................    output_low(SOLB);
00F9:  BSF    03.5
00FA:  BCF    06.1
00FB:  BCF    03.5
00FC:  BCF    06.1
....................    delay_ms(1000); //yeterli olur mu belli degil deneme yapicaz
00FD:  MOVLW  04
00FE:  MOVWF  25
00FF:  MOVLW  FA
0100:  MOVWF  26
0101:  CALL   078
0102:  DECFSZ 25,F
0103:  GOTO   0FF
....................    DUR();
0104:  CALL   09E
0105:  RETURN
.................... }
.................... 
.................... void LAB_180at() { //hem sag hem solda obsticle varsa tam geri donsun sonra baska fonk ile ilk konuma dondurcem
....................    output_low(SOLF);
*
00D4:  BSF    03.5
00D5:  BCF    06.0
00D6:  BCF    03.5
00D7:  BCF    06.0
....................    output_high(SOLB);
00D8:  BSF    03.5
00D9:  BCF    06.1
00DA:  BCF    03.5
00DB:  BSF    06.1
....................    output_high(SAGF);
00DC:  BSF    03.5
00DD:  BCF    06.2
00DE:  BCF    03.5
00DF:  BSF    06.2
....................    output_low(SAGB);
00E0:  BSF    03.5
00E1:  BCF    06.3
00E2:  BCF    03.5
00E3:  BCF    06.3
....................    delay_ms(2000); //yeterli olur mu belli degil deneme yapicaz
00E4:  MOVLW  08
00E5:  MOVWF  25
00E6:  MOVLW  FA
00E7:  MOVWF  26
00E8:  CALL   078
00E9:  DECFSZ 25,F
00EA:  GOTO   0E6
....................    DUR();
00EB:  CALL   09E
00EC:  RETURN
.................... }
.................... 
.................... void LAB_SOL_DON() { //hem sag hem solda obsticle varsa tam geri donsun sonra baska fonk ile ilk konuma dondurcem
....................    output_low(SOLF);
*
00AF:  BSF    03.5
00B0:  BCF    06.0
00B1:  BCF    03.5
00B2:  BCF    06.0
....................    output_high(SOLB);
00B3:  BSF    03.5
00B4:  BCF    06.1
00B5:  BCF    03.5
00B6:  BSF    06.1
....................    output_high(SAGF);
00B7:  BSF    03.5
00B8:  BCF    06.2
00B9:  BCF    03.5
00BA:  BSF    06.2
....................    output_low(SAGB);
00BB:  BSF    03.5
00BC:  BCF    06.3
00BD:  BCF    03.5
00BE:  BCF    06.3
....................    delay_ms(1000); //yeterli olur mu belli degil deneme yapicaz
00BF:  MOVLW  04
00C0:  MOVWF  25
00C1:  MOVLW  FA
00C2:  MOVWF  26
00C3:  CALL   078
00C4:  DECFSZ 25,F
00C5:  GOTO   0C1
....................    DUR();
00C6:  CALL   09E
00C7:  RETURN
.................... }

Configuration Fuses:
   Word  1: 373A   HS NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT DEBUG NOPROTECT

   Some fuses have been forced to be compatible with the ICD debugger.
